/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/dancer.glb -o src/rui/homework2/components/Dancer.tsx -t 
*/

import * as THREE from 'three';
import { JSX, useEffect, useMemo, useRef, useState } from 'react';
import { useGraph } from '@react-three/fiber';
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF, SkeletonUtils } from 'three-stdlib';

type ActionName =
  | 'breakdance01'
  | 'breakdancingEnd'
  | 'breakdanceFootworkToIdle'
  | 'uprock'
  | 'windmill'
  | 'wave'
  | 'hiphop01'
  | 'twerk'
  | 'hiphop02';

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Ch03: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
  };
  materials: {
    Ch03_Body: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

const ACTION_NAMES: ActionName[] = [
  'wave',
  'windmill',
  'breakdancingEnd',
  'breakdance01',
  'breakdanceFootworkToIdle',
  'uprock',
  'hiphop01',
  'twerk',
  'hiphop02',
];

export function Dancer(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF('/dancer.glb');
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as unknown as GLTFResult;
  const { actions } = useAnimations(animations, group);
  const [cur_animation_idx, setCurAnimationIdx] = useState<number>(0);

  useEffect(() => {
    const cur_animation = ACTION_NAMES[cur_animation_idx];
    console.log('cur_animation', cur_animation);
    actions[cur_animation]?.play();
    return () => {
      actions[cur_animation]?.stop();
    };
  }, [actions, cur_animation_idx]);

  return (
    <group
      ref={group}
      position={[0, 1.8, 0]}
      scale={0.01}
      {...props}
      dispose={null}
      onClick={() => {
        setCurAnimationIdx((prev) => (prev + 1) % ACTION_NAMES.length);
      }}
    >
      <group name='AuxScene'>
        <group position={[0, -82.942, -1.295]}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name='Ch03'
            geometry={nodes.Ch03.geometry}
            material={materials.Ch03_Body}
            skeleton={nodes.Ch03.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/dancer.glb');
